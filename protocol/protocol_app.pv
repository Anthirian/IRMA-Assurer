(**************************************************************************
 * DEFINITIONS                                                            *
 **************************************************************************)
 
(* param verboseClauses = explained. *)
(* param traceDisplay = long. *)

(* A public channel *)
free net.

(* The secure channel negotiated during the TLS handshake *)
private free s.

(* Message tags *)
free ClientPassport, ActiveAuthenticationChallenge, ActiveAuthenticationReponse, TransferABC.

(* Agent initialization is done over a private channel *)
private free clientInit, serverInit, initChannel.

(* The cryptographic constructors *)
fun hash/1. 	(* hashing *)
fun hmac/2.
fun encrypt/2. 	(* symmetric key encryption *)
fun sign/2. 	(* Public key signing *)
fun sk/1. 	(* Extracts secret key of a keypair *)
fun pk/1. 	(* Extracts public key of a keypair *)

(* The cryptographic destructors *)

reduc decrypt(encrypt(x, y), y) = x.
reduc unsign(sign(x, sk(y)), pk(y)) = x.

(* A constructor that maps agents to their secret keypairs *)
private fun keypair/1.

(**************************************************************************
 * QUERIES 																  *
 **************************************************************************)

(* Secrecy of passport and attribute data *)
query attacker: passportFlag.
query attacker: abcFlag.

(* Passport authenticity *)
query evinj: endPassiveAuth(x, y, z) ==> evinj: beginPassiveAuth(x, y, z).
query evinj: endActiveAuth(x, y, z) ==> evinj: beginActiveAuth(x, y, z).

(* ABC transaction check *)
query evinj: endTransaction(x, y, z) ==> evinj: beginTransaction(x, y, z).

(* Dead code check *)
query attacker: clientFinished.
query attacker: serverFinished.

(**************************************************************************
 * THE SERVER PROCESS                                                     *
 **************************************************************************)
let Server =
	in(serverInit, (A, B, sessionKey));

	in(initChannel, (=B, issuerKeypair));
	let SKi = sk(issuerKeypair) in (* Secret key used for signing of attributes *)
	(* Start of application data *)

	(* Receiving the encrypted passport (EP) and its HMAC (HP) *)
	in(s, CP); let (=ClientPassport, EP, HP) = CP in

	(* Decrypt the passport data (DP) *)
	let DP = decrypt(EP, sessionKey) in

	(* Verify the HMAC *)
	let =HP = hmac(EP, sessionKey) in

	(* Verify the participants and store the nonce for after passport checks *)
	let (Passport, =A, =B, Nonce) = DP in

	(* Split up passport and store public key *)
	(* Note: If BAC is required, everything is inaccessible until BAC is performed *)
	(* We assume BAC is performed once we get to this part *)
	let (DG, SOD, PKp) = Passport in

	(* Do Passive Authentication by verifying the hash of the datagroups against the SOD file *)
	let =SOD = hash(DG) in

	event endPassiveAuth(A, B, Passport);

	(** Start of Active Authentication **)

	(* Create a challenge *)
	new AAC;

	event beginActiveAuth(A, B, AAC);

	(* Send the challenge *)
	out(s, (ActiveAuthenticationChallenge, AAC));

	(* Receive the response *)
	in(s, AAR); let (=ActiveAuthenticationReponse, AAResp) = AAR in

	(* Verify the response *)
	let =AAC = unsign(AAResp, PKp) in

	event endActiveAuth(A, B, AAC);

	(** End of Active Authentication **)


	(** Start of ABC logic **)

	(* Create a new characteristic, such as "student" or "male" *)
	new Char;

	(* Turn the characteristic into an ABC using the issuer's private key *)
	let ABC = sign(Char, SKi) in

	event beginTransaction(A, B, ABC);

	(* Create attribute data (AD) including participants and the previously received nonce *)
	let AD = (ABC, A, B, Nonce) in

	(* Encrypt the attribute data (EA) *)
	let EA = encrypt(AD, sessionKey) in

	(* Generate the HMAC over the encrypted attributes (HA) *)
	let HA = hmac(EA, sessionKey) in

	(* Send the encrypted data and its HMAC *)
	let ABCdata = (EA, HA) in out(s, (* (TransferABC,*) ABCdata);

	(** End of ABC logic **)

	(** End of application data **)

	(** Secrecy checks **)
	(
		(* secrecy of ABC data *)
		(new abcFlag; out(ABCdata, abcFlag)) |

		(** dead code check **)
		(new serverFinished; out(net, serverFinished))
	).

(**************************************************************************
 * CLIENT PROCESS, this client is the initiator of the protocol.          *
 **************************************************************************)
let Client =
	(* TODO: Is this OK for obtaining the session key? Share DH parameters or just receive entire key? *)
	in(clientInit, (A, B, sessionKey));

	(** Start of application data **)


	(** Start of Passive Authentication **)

	(* Build passport (data is actually received through a separate process) *)
	new DG; (* 16 data groups (DG) in total *)
	let SOD = hash(DG) in (* Contains hashes of all DG values *)
	new P; (* Create new passport agent (only part of the model, not part of passport) *)
	let passportKeypair = keypair(P) in (* Public key is technically stored in DG15 *)
	let Passport = (DG, SOD, pk(passportKeypair)) in

	event beginPassiveAuth(A, B, Passport);

	(* Generating fresh nonce for passport communication *)
	new Np;

	(* Encrypting passport using the session key *)
	let EP = encrypt((Passport, A, B, Np), sessionKey) in

	(* Generating HMAC of the encrypted passport, again reusing the session key *)
	let HP = hmac(EP, sessionKey) in

	(* Send the entire passport data *)
	let CP = (ClientPassport, EP, HP) in out(s, CP);

	(** Start of Active Authentication **)

	(* Receive challenge from Server *)
	in(s, AAC); let (=ActiveAuthenticationChallenge, Ch) = AAC in

	(* Send response to AA challenge *)
	let AAR = (ActiveAuthenticationReponse, sign(Ch, sk(passportKeypair))) in out(s, AAR);

	(** End of Active Authentication **)


	(** Start of ABC logic **)

	(* Receiving encrypted attribute data (EA) and its HMAC (HA) *)
	in(s, ABCs); let (EA, HA) = ABCs in

	(* Verify the HMAC *)
	let =HA = hmac(EA, sessionKey) in

	(* Decrypt the Attribute Data (AD) *)
	let AD = decrypt(EA, sessionKey) in

	(* Verify the participants and the nonce and store the ABC(s) *)
	let (ABCdata, =A, =B, =Np) = AD in

	event endTransaction(A, B, ABCdata);

	(** End of ABC logic **)

	(** End of application data **)

	(** Secrecy checks **)
	(
		(* secrecy of the passport *)
		(new passportFlag; out(CP, passportFlag)) |

		(* dead code check *)
		(new clientFinished; out(net, clientFinished))
	).	

(**************************************************************************
 * THE INITIALIZER PROCESS                                                *
 **************************************************************************)
let initializer =
	(* Generate agent names (unique) *)
	new C;
	new S;

	(* Use the session key agreed upon during TLS handshake *)
	new sessionKey;

	(* Generate issuer keypair *)
	let issuerKeypair = keypair(S) in
	(
		(* Initialize agents *)
		out(clientInit, (C, S, sessionKey)) |
		out(serverInit, (C, S, sessionKey)) |
		out(initChannel, (S, issuerKeypair)) |

		(* Publish all non-secret information, otherwise we might miss attacks *)
		out(net, (C, S, pk(issuerKeypair)))
	).

(**************************************************************************
 * THE SYSTEM                                                             *
 **************************************************************************)
process
	!initializer | !Client | !Server