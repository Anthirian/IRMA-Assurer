(**************************************************************************
 * DEFINITIONS                                                            *
 **************************************************************************)
 
(* A public channel *)
free net.

(* Message tags *)
free ClientHello, ClientCertificateRequest, ClientCertificate, ClientKeyExchange, CertificateVerify, ClientChangeCipherSpec, ClientFinished.
free ServerHello, ServerCertificate, ServerKeyExchange, ServerHelloDone, ServerChangeCipherSpec, ServerFinished.
free ClientPassport, ActiveAuthenticationChallenge, ActiveAuthenticationReponse.

(* Agent initialization is done over a private channel *)
private free clientInit, serverInit, initChannel.

(* Initialization functions *)
private fun cert/2.		(* Generating certificates for agents *)
private fun keypair/1.	(* Generating assymmetric keypairs for agents *)

(* The cryptographic constructors *)
fun hash/1. 	(* Hashing *)
fun hmac/2.		(* Keyed-hash message authentication code *)
fun encrypt/2. 	(* Symmetric key encryption *)
fun sign/2. 	(* Public key signing *)
fun sk/1. 		(* Extracts secret key of a keypair *)
fun pk/1. 		(* Extracts public part of a keypair *)

(* The cryptographic destructors *)
reduc decrypt(encrypt(x, y), y) = x. 		(* symmetric key decryption *)
reduc unsign(sign(x, sk(y)), pk(y)) = x. 	(* signature verification *)
reduc verify(cert(x, y), x) = y.			(* verification of the agent as owner of the key and retrieving the key from the certificate *)

(* Pseudo−random−number function for generating TLS session key randomness *)
fun PRF/1.

(* Symmetric key construction *)
fun clientK/3.
fun serverK/3.

(* Diffie-Hellman computations *)
fun G/0. 										(* Generator point of the group (a constant) *)
fun sm/2.										(* Scalar multiplication *)
equation sm(y, sm(x, G)) = sm(x, sm(y, G)). 	(* Equality property: x×yG = y×xG *)

(**************************************************************************
 * QUERIES 																  *
 **************************************************************************)
 
(* secrecy secure channel *)
private free Sa.
private free Sb.
query attacker: Sa.
query attacker: Sb.
 
(* secrecy passport *)
private free passportFlag.
query attacker: passportFlag.

(* secrecy ABCs *)
private free abcFlag.
query attacker: abcFlag.
 
(* secrecy Pre Master secret *)
private free PMSa.
private free PMSb.
query attacker: PMSa.
query attacker: PMSb.

(* secrecy Master secret *)
private free MSa. 
private free MSb.
query attacker: MSa.
query attacker: MSb.

(* secrecy Finished message from the client *)
private free FinishedAFlag.
query attacker: FinishedAFlag.

(* secrecy Finished message from the server *)
private free FinishedBFlag.
query attacker: FinishedBFlag. 

(* authenticity of the server *)
query evinj: endServerAuth(x, y, z) ==> evinj: beginServerAuth(x, y, z).

(* authenticity of the client *)
query evinj: endClientAuth(x, y, z) ==> evinj: beginClientAuth(x, y, z).

(* Passport checks *)
query evinj: endPassiveAuth(x, y, z) ==> evinj: beginPassiveAuth(x, y, z).
query evinj: endActiveAuth(x, y, z) ==> evinj: beginActiveAuth(x, y, z).

(* ABC transaction check *)
query evinj: endTransaction(x, y, z) ==> evinj: beginTransaction(x, y, z).

(* Dead code check *)
private free clientFinished.
private free serverFinished.
query attacker: clientFinished.
query attacker: serverFinished.

(**************************************************************************
 * THE SERVER PROCESS                                                     *
 **************************************************************************)
let Server =
	(** Start of initialization **)
	
	(* B receives initial agent data over a trusted channel *)
	in(serverInit, (B, serverKeypair, serverCert));
	
	(* B receives the issuer keypair over another trusted channel, double checking to make sure it is in fact intended for B *)
	in(initChannel, (=B, issuerKeypair, issuerCert));
	
	(* B retrieves the secret keys from both keypairs *)
	let SKs = sk(serverKeypair) in (* Secret key used for communication *)
	let SKi = sk(issuerKeypair) in (* Secret key used for signing of attributes *)
	
	(** End of initialization **)
	
	(** Start of TLS handshake **)
	
	(** Replication to model arbitrary sessions **)
	!
	
	(* B receives ClientHello from A *)
	in(net, CH); let (=ClientHello, A, Na, SupportedOptions) = CH in
	
	(* B generates fresh nonce Nb *)
	new Nb;	
	
	(* B creates a new characteristic, such as "student" or "male" *)
	new Char;
	
	(* B picks a cipher suite and compression method from SupportedOptions received from A *)
	new SelectedOptions;
	
	(* B sends ServerHello to A *)
	let SH = (ServerHello, B, Nb, SelectedOptions) in out(net, SH);
	
	(* B sends ServerCertificate to A *)
	let SC = (ServerCertificate, serverCert) in out(net, SC);
	
	(* B generates Diffie-Hellman Key Exchange parameters *)
	new p; (* Prime modulus *)
	new n; (* Order of generator point G *)
	new h; (* Cofactor *)
	new a; (* Elliptic curve parameter 1 *)
	new b; (* Elliptic curve parameter 2 *)
	new beta; (* Server's secret multiplier *)
	
	(* B sends ServerKeyExchange to A, featuring all public ECDHE parameters *)
	let SKE = (ServerKeyExchange, p, a, b, G, n, h, sm(beta, G), sign((Na, Nb, p, a, b, G, n, h, sm(beta, G)), SKs)) in out(net, SKE);
	
	(* B creates a list of acceptable certificate types and CAs *)
	new Acceptable_certificate_types;
	new Acceptable_certificate_authorities;
	
	(* B sends ClientCertificateRequest to A *)
	let CCR = (ClientCertificateRequest, Acceptable_certificate_types, Acceptable_certificate_authorities) in out(net, CCR);
	
	(* B sends ServerHelloDone to A *)
	let SHD = ServerHelloDone in out(net, SHD);
	
	(* B receives ClientCertificate from A *)
	in(net, CC); let (=ClientCertificate, clientCert) = CC in
	
	(* B receives ClientKeyExchange from A, containing the remaining ECDHE parameters *)
	in(net, CKE); let(=ClientKeyExchange, AG) = CKE in
	
	(* B receives CertificateVerify from A *)
	let unsignKey = verify(clientCert, A) in
	in(net, CV); let (=CertificateVerify, cvHash) = unsign(CV, unsignKey) in
	
	(* B verifies client signature *)	
	let =cvHash = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE)) in
	
	(** End of Client authentication **)
	event endClientAuth(A, B, cvHash);
	
	(* B calculates the Pre-Master Secret *)
	let PMS = sm(beta, AG) in
	
	(* B receives ClientChangeCipherSpec from A *)
	in(net, CCCS); let =ClientChangeCipherSpec = CCCS in
	
	(* B receives Finished from A *)
	in(net, FA);
	
	(* B calculates the Master secret *)
	let M = PRF((PMS, Na, Nb)) in
	
	(* B calculates Finished *)
	let Finished = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE, CV, CCCS, M)) in
	
	(** Start of Server authentication **)
	event beginServerAuth(A, B, Finished);
	
	(* B sends ServerChangeCipherSpec to A, indicating intention to switch to the encryption negotiated above *) 	
	let SCCS = ServerChangeCipherSpec in out(net, SCCS);
		
	(* B sends Finished to A *)
	out(net, encrypt(Finished, serverK(Na, Nb, M)));
	
	(* B verifies received Finished *)
	let =Finished = decrypt(FA, clientK(Na, Nb, M)) in
	
	(** End of TLS handshake **)
	
	(** Start of application data **)
	
	(* B creates a new channel secured with the newly agreed upon session key *)
	new s;
	
	(* B sends the channel to A after encrypting *)
	out(net, encrypt(s, serverK(Na, Nb, M)));
	
	(** Start of application data **)
	
	(* B receives the encrypted passport and HMAC from A *)
	in(s, CP); let (=ClientPassport, EP, HP) = CP in

	(* B decrypts the passport data *)
	let DP = decrypt(EP, clientK(Na, Nb, M)) in

	(* B verifies the HMAC *)
	let =HP = hmac(EP, clientK(Na, Nb, M)) in

	(* B verifies the participants and stores the nonce *)
	let (Passport, =A, =B, Nonce) = DP in

	(* B stores passport data, public key and hash *)
	(* Note: If BAC is required, everything is inaccessible until BAC is performed *)
	(* We assume BAC is performed once we get to this part *)
	let (DG, SOD, PKp) = Passport in

	(* B performs Passive Authentication *)
	let =SOD = hash(DG) in

	event endPassiveAuth(A, B, Passport);

	(** Start of Active Authentication **)
	
	(* B creates a challenge *)
	new AAC;
	
	event beginActiveAuth(A, B, AAC);
	
	(* B sends ActiveAuthenticationChallenge to A *)
	out(s, (ActiveAuthenticationChallenge, AAC));

	(* B receives ActiveAuthenticationResponse from A *)
	in(s, AAR); let (=ActiveAuthenticationReponse, AAResp) = AAR in

	(* B verifies that it is in fact the correct solution to the challenge *) 
	let =AAC = unsign(AAResp, PKp) in
	
	(** End of Active Authentication **)
	event endActiveAuth(A, B, AAC);

	(** Start of ABC logic **)

	(* B signs the characteristic, turning it into an ABC, using the issuer's private key *)
	let ABC = sign(Char, SKi) in

	event beginTransaction(A, B, ABC);

	(* B creates attribute data (AD) containing the credential, participants and the previously received nonce *)
	let AD = (ABC, A, B, Nonce) in

	(* B encrypts the attribute data (EA) *)
	let EA = encrypt(AD, serverK(Na, Nb, M)) in

	(* B generates the HMAC over the encrypted attributes (HA) *)
	let HA = hmac(EA, serverK(Na, Nb, M)) in

	(* B combines both parts and sends the message to A *)
	let ABCdata = (EA, HA) in out(s, ABCdata);

	(** End of ABC logic **)

	(** End of application data **)

	(* Secrecy checks *)
	(
		(** secrecy check on the secure channel **)
		(out(s, Sb)) |
	
		(* secrecy of ABC data *)
		(out(ABCdata, abcFlag)) |
		
		(** secrecy check on the Master secret **)
		(out(M, MSb)) |
		
		(** secrecy check on the Pre-Master Secret **)
		(out(PMS, PMSb)) |
		
		(** secrecy check on the finished **)
		(out(Finished, FinishedBFlag)) |
		
		(** dead code check **)
		(out(net, serverFinished))
	).
	
(**************************************************************************
 * CLIENT PROCESS, this client is the initiator of the protocol.          *
 **************************************************************************)
let Client =
	(** Start of initialization **)

	(* A receives initial agent data over a trusted channel *)
	in(clientInit, (A, B, clientKeypair, clientCert));
	
	(* A extracts the secret key from the keypair *)
	let SKc = sk(clientKeypair) in
	
	(** End of initialization **)
	
	(** Start of TLS handshake **)
	
	(* A generates fresh nonce Na *)
	new Na;
	
	(* A lists supported cipher suites and compression methods *)
	new SupportedOptions;
	
	new Np; (* Generating fresh nonce for passport communication *)
	new P; (* Create new passport agent (only part of the model, not part of passport) *)
	new DG;
	let SOD = hash(DG) in (* Contains hashes of all DG values *)
	let passportKeypair = keypair(P) in (* Public key is technically stored in DG15 *)
	let Passport = (DG, SOD, pk(passportKeypair)) in
	
	(* A sends ClientHello to B *)
	let CH = (ClientHello, A, Na, SupportedOptions) in out(net, CH);
	
	(* A receives ServerHello from B *)
	in(net, SH); let (=ServerHello, =B, Nb, SelectedOptions) = SH in
	
	(* A receives ServerCertificate from B *)
	in(net, SC); let (=ServerCertificate, serverCert) = SC in
	
	(* A receives ServerKeyExchange from B stores the Diffie-Hellman parameters *)
	in(net, SKE); let (=ServerKeyExchange, p, a, b, =G, n, h, BG, DHSignature) = SKE in
	
	(* A retrieves the server's public key from its certificate *)
	let unsignKey = verify(serverCert, B) in
	
	(* A checks the signature on the parameters to ensure the message was really sent by B *)
	let (=Na, =Nb, =p, =a, =b, =G, =n, =h, =BG) = unsign(DHSignature, unsignKey) in
	
	(* A receives ClientCertificateRequest from B *)
	in(net, CCR); let (=ClientCertificateRequest, Acceptable_certificate_types, Acceptable_certificate_authorities) = CCR in
	
	(* A receives ServerHelloDone from B *)
	in(net, SHD); let =ServerHelloDone = SHD in
	
	(* A sends ClientCertificate to B *)
	let CC = (ClientCertificate, clientCert) in out(net, CC);
	
	(* A generates a new secret multiplier *)
	new alpha;
	
	(* A sends ClientKeyExchange to B *)
	let CKE = (ClientKeyExchange, sm(alpha, G)) in out(net, CKE);
	
	(* A creates a hash of the past messages *)
	let cvHash = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE)) in
	
	(** Start of client authentication **)
	event beginClientAuth(A, B, cvHash);
	
	(* A sends CertificateVerify to B *)
	let CV = sign((CertificateVerify, cvHash), SKc) in out(net, CV);
	
	(* A computes the pre-master secret (X×YG) *)
	let PMS = sm(alpha, BG) in
	
	(* A computes the master secret *)
	let M = PRF((PMS, Na, Nb)) in
	
	(* A sends ClientChangeCipherSpec, indicating intention to switch to the encryption negotiated above *)
	let CCCS = ClientChangeCipherSpec in out(net, CCCS);
	
	(* A computes Finished using the hash function *)
	let Finished = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE, CV, CCCS, M)) in
	
	(* A sends Finished to B *)
	out(net, encrypt(Finished, clientK(Na, Nb, M)));
	
	(* A receives ServerChangeCipherSpec from B, indicating a switch to the encryption negotiated above. Essentially just 1 byte *)
	in(net, SCCS); let =ServerChangeCipherSpec = SCCS in
	
	(* A receives Finished from B *)
	in(net, FB);
	
	(* A verifies received finished *)
	let =Finished = decrypt(FB, serverK(Na, Nb, M)) in
	
	(** End of server authentication **)
	event endServerAuth(A, B, Finished);
	
	(** End of TLS handshake **)
	
	(* A receives the secure channel created by the server *)
	in(net, newChannel); let s = decrypt(newChannel, serverK(Na, Nb, M)) in
	
	(** Start of application data **)
	
	(** Start of Passive Authentication **)
	event beginPassiveAuth(A, B, Passport);	
	
	(* A encrypts the passport using the session key *)
	let EP = encrypt((Passport, A, B, Np), clientK(Na, Nb, M)) in
	
	(* A computes the HMAC of the encrypted passport, again reusing the session key *)
	let HP = hmac(EP, clientK(Na, Nb, M)) in
	
	(* A combines both parts and sends the combined message *)
	let CP = (ClientPassport, EP, HP) in out(s, CP);

	(** Start of Active Authentication **)

	(* A receives a challenge from B *)
	in(s, AAC); let (=ActiveAuthenticationChallenge, Ch) = AAC in

	(* A sends the response to the AA challenge *)
	let AAR = (ActiveAuthenticationReponse, sign(Ch, sk(passportKeypair))) in out(s, AAR);

	(** End of Active Authentication **)

	(** Start of ABC logic **)

	(* A receives the combined message from B *)
	in(s, ABCs); let (EA, HA) = ABCs in

	(* A checks the HMAC *)
	let =HA = hmac(EA, serverK(Na, Nb, M)) in

	(* A decrypts the Attribute Data (AD) *)
	let AD = decrypt(EA, serverK(Na, Nb, M)) in

	(* A verifies the participants and nonce and stores the ABC(s) *)
	let (ABCdata, =A, =B, =Np) = AD in

	event endTransaction(A, B, ABCdata);

	(** End of ABC logic **)

	(** End of application data **)

	(** Secrecy checks **)
	(
		(** secrecy of secure channel **)
		(out(s, Sa)) |
		
		(* secrecy of passport data *)
		(out(CP, passportFlag)) |
		
		(** secrecy check on the Master secret **)
		(out(M, MSa)) |
		
		(** secrecy check on the Pre-Master Secret **)
		(out(PMS, PMSa)) |
		
		(** secrecy check on the Finished message **)
		(out(Finished, FinishedAFlag)) |
		
		(** dead code check **)
		(out(net, clientFinished))
	).
				
(**************************************************************************
 * THE INITIALIZER PROCESS                                                *
 **************************************************************************)
let initializer =
	(* Generate agent names (unique) *)
	new C; 
	new S;
	
	(* Generate keypairs *)
	let clientKeypair = keypair(C) in
	let serverKeypair = keypair(S) in
	let issuerKeypair = keypair(S) in

	(* Generate certificates *)
	let clientCert = cert(C, pk(clientKeypair)) in
	let serverCert = cert(S, pk(serverKeypair)) in
	let issuerCert = cert(S, pk(issuerKeypair)) in
	(
		(* Initialize agents *)
		out(clientInit, (C, S, clientKeypair, clientCert)) |
		out(serverInit, (S, serverKeypair, serverCert)) |
		out(initChannel, (S, issuerKeypair, issuerCert)) |		
		
		(* Publish all non-secret information, otherwise we might miss attacks *)
		out(net, (C, S, clientCert, serverCert))
	).
	
(**************************************************************************
 * THE SYSTEM                                                             *
 **************************************************************************)
process
	!initializer | !Client | !Server