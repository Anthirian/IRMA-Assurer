(**************************************************************************
 * DEFINITIONS                                                            *
 **************************************************************************)

(* param verboseClauses = explained. *)
(* param traceDisplay = long. *)
 
(* A public channel *)
free net.

(* Message tags *)
free ClientHello, ServerHello, ServerCertificate, ServerKeyExchange, ClientCertificateRequest, ServerHelloDone, ClientCertificate, ClientKeyExchange, CertificateVerify, ClientChangeCipherSpec, ClientFinished, ServerChangeCipherSpec, ServerFinished.

(* Agent initialization is done over a private channel *)
private free clientInit, serverInit.

(* The cryptographic constructors *)
fun hash/1. 	(* hashing *)
fun encrypt/2. 	(* symmetric key encryption *)
fun sign/2. 	(* Public key signing *)
fun sk/1. 		(* Extracts secret key of a keypair *)
fun pk/1. 		(* Extracts public part of a keypair *)

(* The cryptographic destructors *)
reduc decrypt(encrypt(x, y), y) = x.
reduc unsign(sign(x, sk(y)), pk(y)) = x.

(* A constructor that maps agents to their secret keypairs *)
private fun keypair/1.

(* Pseudo−random−number function for generating TLS session key randomness *)
fun PRF/1.

(* Symmetric key construction *)
fun clientK/3.
fun serverK/3.

(* Certificates *)
private fun cert/2.

(* If cert(x, y) establishes x as owner of key y, y is returned, i.e. this retrieves the public key from the server's certificate *)
reduc verify(cert(x, y), x) = y.
	
(* Diffie-Hellman computations *)
fun g/0. 										(* Generator of the group (a constant) *)
fun exp/2.										(* Exponentiation *)
equation exp(exp(g, x), y) = exp(exp(g, y), x). (* Equality property *)

(**************************************************************************
 * QUERIES 																  *
 **************************************************************************)
(** secrecy check on the secure channel **)
query attacker: Sa.
query attacker: Sb.

(* secrecy Pre Master secret *)
query attacker: PMSa.
query attacker: PMSb.

(* secrecy Master secret *)
query attacker: MSa.
query attacker: MSb.

(* secrecy Finished message from the client *)
query attacker: FinishedAFlag.

(* secrecy Finished message from the server *)
query attacker: FinishedBFlag.

(* authenticity of the server *)
query evinj: endServerAuth(x, y, z) ==> evinj: beginServerAuth(x, y, z).

(* authenticity of the client *)
query evinj: endClientAuth(x, y, z) ==> evinj: beginClientAuth(x, y, z).

(* Dead code check *)
query attacker: clientFinished.
query attacker: serverFinished.

(**************************************************************************
 * THE SERVER PROCESS                                                     *
 **************************************************************************)
let server =
	(** Initial agent data from a trusted channel **)
	in(serverInit, (B, serverKeypair, serverCert));

	let SKs = sk(serverKeypair) in
	
	(** Replication to model arbitrary sessions **)
	!
	
	(* A −> B : ClientHello *)
	in(net, CH); let (=ClientHello, A, Na, SupportedOptions) = CH in
	
	(* B generates fresh nonce Nb *)
	new Nb;
	
	(* Server picks a cipher suite and compression method from SupportedOptions *)
	new SelectedOptions;

	(* B −> A : ServerHello *)
	let SH = (ServerHello, B, Nb, SelectedOptions) in out(net, SH);
	
	(* B −> A : ServerCertificate *)
	let SC = (ServerCertificate, serverCert) in out(net, SC);
	
	(* Generate Diffie-Hellman Key Exchange parameters *)
	new N; (* Modulus (prime), public *)
	new Y; (* Server's secret exponent *)
	
	(* B -> A: ServerKeyExchange *)
	let SKE = (ServerKeyExchange, g, N, exp(g, Y), sign((Na, Nb, g, N, exp(g, Y)), SKs)) in out(net, SKE);
	
	(* Create a list of acceptable certificate types and CAs *)
	new Acceptable_certificate_types;
	new Acceptable_certificate_authorities;
	
	(* Sending ClientCertificateRequest *)
	let CCR = (ClientCertificateRequest, Acceptable_certificate_types, Acceptable_certificate_authorities) in out(net, CCR);
	
	(* Sending ServerHello Done *)
	let SHD = ServerHelloDone in out(net, SHD);
	
	(* A −> B : ClientCertificate *)
	in(net, CC); let (=ClientCertificate, clientCert) = CC in
	
	(* A −> B : ClientKeyExchange *)
	in(net, CKE); let(=ClientKeyExchange, GX) = CKE in
	
	(* A −> B : CertificateVerify *)
	let unsignKey = verify(clientCert, A) in
	in(net, CV); let (=CertificateVerify, cvHash) = unsign(CV, unsignKey) in
	
	(* B verifies client signature *)		
	let =cvHash = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE)) in
	
	(** end client authentication **)
	event endClientAuth(A, B, cvHash);
	
	(* Calculating the Pre-Master Secret *)
	let PMS = exp(GX, Y) in
	
	(* Receiving ClientChangeCipherSpec *)
	in(net, CCCS); let =ClientChangeCipherSpec = CCCS in
	
	(* A −> B : Finished *)
	in(net, FA);
		
	(* B calculates M *)
	let M = PRF((PMS, Na, Nb)) in
	
	(* B calculates Finished *)
	let Finished = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE, CV, CCCS, M)) in
	
	(** server authentication **)
	event beginServerAuth(A, B, Finished);
	
	(* Sending ServerChangeCipherSpec, indicating a switch to the encryption negotiated above. Essentially just 1 byte *) 	
	let SCCS = ServerChangeCipherSpec in out(net, SCCS);
	
	(* B −> A : Finished *)
	out(net, encrypt(Finished, serverK(Na, Nb, M)));

	(* B verifies received Finished *)
	let =Finished = decrypt(FA, clientK(Na, Nb, M)) in
	
	(* Set up a new secure channel encrypted with the newly generated session key *)
	new s;
	out(net, encrypt(s, serverK(Na, Nb, M)));
	
	(* Secrecy checks *)
	(
		(** secrecy check on the secure channel **)
		(new Sa; out(s, Sa)) |
		
		(** secrecy check on the Master secret **)
		(new MSb; out(M, MSb)) |
	
		(** secrecy check on the Pre-Master Secret **)
		(new PMSb; out(PMS, PMSb)) |
	
		(** secrecy check on the finished **)
		(new FinishedBFlag; out(Finished, FinishedBFlag)) |
	
		(** dead code check **)
		(new serverFinished; out(net, serverFinished))
	).
	
(**************************************************************************
 * CLIENT PROCESS, this client is the initiator of the protocol.          *
 **************************************************************************)
let client =
	(** Initial agent data from a trusted channel **)
	in(clientInit, (A, B, clientKeypair, clientCert));
	
	let SKc = sk(clientKeypair) in
	
	(* A generates fresh nonce Na *)
	new Na;
	
	(* Supported cipher suites and compression methods *)
	new SupportedOptions;
	
	(* A −> B : ClientHello *)
	let CH = (ClientHello, A, Na, SupportedOptions) in out(net, CH);
	
	(* B −> A : ServerHello *)
	in(net, SH); let (=ServerHello, =B, Nb, SelectedOptions) = SH in
	
	(* B −> A : ServerCertificate *)
	in(net, SC); let (=ServerCertificate, serverCert) = SC in
	
	(* Receiving Server DH Key Parameters and checking integrity *)
	in(net, SKE); let (=ServerKeyExchange, =g, N, GY, DHSignature) = SKE in
	let unsignKey = verify(serverCert, B) in
	let (=Na, =Nb, =g, =N, =GY) = unsign(DHSignature, unsignKey) in
	
	(* Receiving ClientCertificateRequest *)
	in(net, CCR); let (=ClientCertificateRequest, Acceptable_certificate_types, Acceptable_certificate_authorities) = CCR in
	
	(* Receiving ServerHelloDone *)
	in(net, SHD); let =ServerHelloDone = SHD in
	
	(* A −> B: ClientCertificate *)
	let CC = (ClientCertificate, clientCert) in out(net, CC);
	
	(* A −> B : ClientKeyExchange *)
	new X;
	let CKE = (ClientKeyExchange, exp(g, X)) in out(net, CKE);
	
	(* Creating hash of past messages *)
	let cvHash = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE)) in
	
	(** begin client authentication **)
	event beginClientAuth(A, B, cvHash);
	
	(* A −> B: CertificateVerify *)
	let CV = sign((CertificateVerify, cvHash), SKc) in out(net, CV);
	
	(* Compute the pre-master secret (g^xy) *)
	let PMS = exp(GY, X) in
	
	(* Compute the master secret, technically also requires "master secret" to be part of the arguments for hashing *)
	let M = PRF((PMS, Na, Nb)) in
	
	(* Sending ClientChangeCipherSpec, indicating a switch to the encryption negotiated above. Essentially just 1 byte *)
	let CCCS = ClientChangeCipherSpec in out(net, CCCS);
	
	(* Compute hash and session key *)
	let Finished = hash((CH, SH, SC, SKE, CCR, SHD, CC, CKE, CV, CCCS, M)) in
	
	(* A −> B : Finished *)
	out(net, encrypt(Finished, clientK(Na, Nb, M)));
			
	(* Receiving ServerChangeCipherSpec, indicating a switch to the encryption negotiated above. Essentially just 1 byte *)
	in(net, SCCS); let =ServerChangeCipherSpec = SCCS in
	
	(* B −> A : Finished *)
	in(net, FB);
	
	(* A verifies received finished *)
	let =Finished = decrypt(FB, serverK(Na, Nb, M)) in
	
	(** end server authentication **)
	event endServerAuth(A, B, Finished);
	
	(* Receive the secure channel created by the server *)
	in(net, newChannel); let s = decrypt(newChannel, serverK(Na, Nb, M)) in
	
	(* Secrecy checks *)
	(
		(** secrecy check on the secure channel **)
		(new Sb; out(s, Sb)) |
		
		(** secrecy check on the Master secret **)
		(new MSa; out(M, MSa)) |
	
		(** secrecy check on the Pre-Master Secret **)
		(new PMSa; out(PMS, PMSa)) |
	
		(** secrecy check on the Finished message **)
		(new FinishedAFlag; out(Finished, FinishedAFlag)) |
	
		(** dead code check **)
		(new clientFinished; out(net, clientFinished))
	).
	
(**************************************************************************
 * THE INITIALIZER PROCESS                                                *
 **************************************************************************)
let initializer =
	(* Generate agent names (unique) *)
	new C; 
	new S;
	
	(* Generate keypairs *)
	let clientKeypair = keypair(C) in
	let serverKeypair = keypair(S) in
	
	(* Generate certificates *)
	let clientCert = cert(C, pk(clientKeypair)) in
	let serverCert = cert(S, pk(serverKeypair)) in
	(
		(* Initialize agents *)
		out(clientInit, (C, S, clientKeypair, clientCert)) |
		out(serverInit, (S, serverKeypair, serverCert)) |
		
		(* Publish all non-secret information, otherwise we might miss attacks *)
		out(net, (C, S, clientCert, serverCert))
	).
	
(**************************************************************************
 * THE SYSTEM                                                             *
 **************************************************************************)
process
	!initializer | !client | !server